<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Landslide TSmanagement</title>
    <base href="/">

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="favicon.ico">

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
          integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- Optional theme -->
    <!--
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css"
        integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Comfortaa" rel="stylesheet">
    <link href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/3.1.3/css/bootstrap-datetimepicker.min.css" rel="stylesheet">


	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
	<script src="https://code.jquery.com/jquery-2.2.4.min.js"
            integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
            crossorigin="anonymous"></script>
	<!-- Latest compiled and minified JavaScript -->
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
	        integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"
	        crossorigin="anonymous"></script>
	<!-- DataTable script libarary -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/jquery.dataTables.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/dataTables.bootstrap.min.js"></script>
	<script src="https://cdn.datatables.net/plug-ins/1.10.15/sorting/stringMonthYear.js"></script>

    <style>
        /* You can add global styles to this file, and also import other style files */
        body {
            padding-top: 80px;
            font-family: 'Comfortaa', cursive;
        }
		.modal-content {
			margin: 15% auto;
			padding: 20px;
			border: 1px solid #888;
			width: 80%;
		}
		.modalbox .box {
			background-color:white;
		}
		.btn btn-info btn-lg {
			height:40px;
			width:80px;
		}

		

		.custom-select {
			position: relative;
			font-family: 'Comfortaa', cursive;
		}
		/* the container must be positioned relative*/
		.custom-select select {
			display: none;
			z-index:2;
		}
		.select-selected {
			background-color: White;
			display:inline-block;
		}
		.select-selected:after {
			position:absolute;
			content="";
			top:14px;
			right:10px;
			width:0;
			height:0;
			border:6px solid transparent;
			border-color: #fff transparent transparent transparent;
		}
		/* style the arrow inside the select element */
		.select-selected.select-arrow-active:after {
			border-color: transparent transparent #fff transparent;
			top: 7px;
		}
		/* style the items, including the selected item */
		.select-items div,.select-selected {
			color: #000000;
			padding: 8px 16px;
			border: 1px solid transparent;
			border-color: transparent transparent rgba(0,0,0,0.1) transparent;
			cursor: pointer;
		}
		/* style items */
		.select-items {
			background-color: White;
			top: 100%;
			left: 0;
			right: 0;
			z-index: 99;
		}
		/* hide the items when the select box is closed */
		.select-hide {
			display: none;
		}
		.select-items div:hover, .same-as-selected {
			background-color: rgba(0,0,0,0.1);
		}
		.dataTables_wrapper .dataTables_paginate {
         	   width: 100%;
           	 float: none;
           	 text-align: center;
       		 }
    </style>
</head>
<body>

<nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
                    aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a href="/" class="navbar-brand"><strong style="font-size:22px">TS Management</strong></a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li [routerLinkActive]="['active']" [routerLinkActiveOptions]="{exact:true}">
                    <a href="/history" [routerLink]="['/home']">History</a>
                </li>
            </ul>
            <ul class="nav navbar-nav navbar-right">
                <li [routerLinkActive]="['active']" [routerLinkActiveOptions]="{exact:true}">
                    <a href="/about" [routerLink]="['/about']">About</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="panel-body">
    <table id="sortedTable" class="display">
        <thead>
        <tr>
            <th>TS</th>
            <th>Owner</th>
            <th>TAS</th>
            <th>Name</th>
            <th>Platform</th>
            <th>Memory</th>
            <th>OS</th>
            <th>Version</th>
            <th>State</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        {% for TS in tsList.values() %}
            <tr>
                <th>{{ TS['info']['managementIp'] }}</th>
                <td>{{ TS['owner'] }}</td>
                <td><span id="TAS">{{ TS['tas'] }}</span></td>
                <td>{{ TS['name'] }}</td>
                <td>{{ TS['info']['platform'] }}</td>
                <td>{{ TS['info']['memory'] }}</td>
                <td>{{ TS['info']['os'] }}</td>
                <td>{{ TS['version'] }}</td>
                <td>
                    {% if 'NOT_READY' in TS['state'] %}
                        <span class="label label-danger">
                    {% elif 'READY' in TS['state'] %}
                        <span class="label label-success">
					{% elif 'LOCK' in TS['state'] %}
						<span class="label label-danger">
                    {% else %}
                        <span class="label label-warning">
                    {% endif %}
                    {{ TS['state'] }}
                    </span>
                </td>
                <td style="width:30px">
                    <div class="btn-group">
						<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#configuration{{ loop.index }}"><img src="{{url_for('static', filename='gear.jpg')}}" height="24px" weight="24px"/></button>
						<div id="configuration{{ loop.index }}" class="modal" role="dialog">
						<div class="modal-content">
							<div class="modal-header">
								<h4 class="modal-title">TestServer Configuration</h4>
							</div>

							<ul class="nav nav-tabs" id="tabContent">
								<li class="active"><a href="#relocate{{ loop.index }}" data-toggle="tab">Relocate</a></li>
								<li><a href="#lock{{ loop.index }}" data-toggle="tab">Lock Syetem</a></li>
							</ul>

							<div class="tab-content">
								<div class="tab-pane active" id="relocate{{ loop.index }}">
									<div class="modal-body">
										<div class="custom-select" id="{{ loop.index }}">Current User : 
											<select>
												<option value="">Select User</option>
												{% for TAS in tasList %}
													{% set value = TAS.split(',') %}
													<option value="{{ value[0] }}"> {{ value[1] }} </option>
												{% endfor %}
											</select>
										</div>

										<div class="custom-select" id="{{ loop.index }}">Target TAS     : 
											<select>
												<option value="">Select TAS</option>
												{% for TAS in tasList %}
													{% set value = TAS.split(',') %}
													<option value="{{ value[0] }}"> {{ value[0] }}({{ value[1] }}) </option>
												{% endfor %}
											</select>
										</div>

										<button style="margin-top:30px;" type="submit" onclick="modify('{{ TS.info.managementIp }}', '{{ loop.index }}')" class="btn btn-primary">Relocate</button>
									</div>
								</div>

								<div class="tab-pane" id="lock{{ loop.index }}">
									<button type="submit" class="btn btn-info" onclick="lock('{{ TS.info.managementIp }}')">Lock</button>
									<button type="submit" class="btn btn-warning" onclick="unlock('{{ TS.info.managementIp }}')">Unlock</button>
								</div>

							</div>

							<div class="modal-footer">
								<button id="closeButton" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
							</div>
						</div>
						</div>
					</div>
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#sortedTable").DataTable({
            "order": [[0, "asc"]],
            "iDisplayLength": 10,
            "columnDefs": [{ "searchable": false, "targets": 9 }]
        });
        $('div.dataTables_filter input').focus();
    });

	//////////////// drop-down implementation //////////////////////
	var dropdownlist, selElmnt, selectdiv, tempdiv, optiondiv, i, j;

	/* Look for any elements with the class "custom-select": */
	dropdownlist = document.getElementsByClassName("custom-select");

	for (i = 0; i < dropdownlist.length; i++) {
		selElmnt = dropdownlist[i].getElementsByTagName("select")[0];

		/* For each element, create a new DIV that will act as the selected item: */
		selectdiv = document.createElement("DIV");
		selectdiv.setAttribute("class", "select-selected");
		selectdiv.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
		dropdownlist[i].appendChild(selectdiv);

		/* For each element, create a new DIV that will contain the option list: */
		tempdiv = document.createElement("DIV");
		tempdiv.setAttribute("class", "select-items select-hide");

		for (j = 1; j < selElmnt.length; j++) {
			/* For each option in the original select element,
			   create a new DIV that will act as an option item: */
			optiondiv = document.createElement("DIV");
			optiondiv.innerHTML = selElmnt.options[j].innerHTML;
			optiondiv.addEventListener("click", function(e) {
				/* When an item is clicked, update the original select box,
					and the selected item: */
				var targetNode, selectNode, previousNode, i, k;
				selectNode = this.parentNode.parentNode.getElementsByTagName("select")[0];
				previousNode = this.parentNode.previousSibling;

				for (i = 0; i < selectNode.length; i++) {
					if (selectNode.options[i].innerHTML == this.innerHTML) {
						selectNode.selectedIndex = i;
						previousNode.innerHTML = this.innerHTML;
						targetNode = this.parentNode.getElementsByClassName("same-as-selected");

						for (k = 0; k < targetNode.length; k++) {
							targetNode[k].removeAttribute("class");
						}
						this.setAttribute("class", "same-as-selected");
						break;
					}
				}
			previousNode.click();
		});
		tempdiv.appendChild(optiondiv);
	}

	dropdownlist[i].appendChild(tempdiv);
	selectdiv.addEventListener("click", function(e) {
		/* When the select box is clicked, close any other select boxes,
			and open/close the current select box: */
		e.stopPropagation();
		closeAllSelect(this);
		this.nextSibling.classList.toggle("select-hide");
		this.classList.toggle("select-arrow-active");
		});
	}
	
	function closeAllSelect(elmnt) {
		/* A function that will close all select boxes in the document,
			except the current select box: */
		var dropdownlist, targetNode, arrNo = [], i;
		dropdownlist = document.getElementsByClassName("select-items");
		targetNode = document.getElementsByClassName("select-selected");

		for (i = 0; i < targetNode.length; i++) {
			if (elmnt == targetNode[i]) {
				arrNo.push(i)
			} else {
				targetNode[i].classList.remove("select-arrow-active");
			}
		}

		for (i = 0; i < dropdownlist.length; i++) {
			if (arrNo.indexOf(i)) {
				dropdownlist[i].classList.add("select-hide");
			}
		}
	}
	
	/* If the user clicks anywhere outside the select box,
	then close all select boxes: */
	document.addEventListener("click", closeAllSelect);

	///////////////////////////////////////////////////////////////////////////////

    function modify(TSaddr, index) {
		var dropdownlist = document./*getElementById("relocate"+index).*/getElementsByClassName("custom-select")[0].getElementsByTagName("option");
		var targetlist = document.getElementsByClassName("select-selected"), targetTas, currentUser, i, targetIndex;

		for (i = 0; i < targetlist.length; i++) {
			if (targetlist[i].parentElement.id == index) {
				targetIndex = i;
				break;
			}
		}

		for (i = 0; i < dropdownlist.length; i++) {
			if (targetlist[targetIndex].textContent == dropdownlist[i].innerHTML) {
				currentUser = dropdownlist[i].getAttribute("value");
			}
			if (targetlist[targetIndex+1].textContent == dropdownlist[i].innerHTML) {
				targetTas = dropdownlist[i].getAttribute("value");
			}
		}

		window.location.href = window.location.href + "modify/" + TSaddr + "/" + currentUser + "/" + targetTas;
    }

	function lock(TSaddr) {
		window.location.href = window.location.href + "lock/" + TSaddr;
	}

	function unlock(TSaddr) {
		window.location.href = window.location.href + "unlock/" + TSaddr;
	}

    function validateIpAddr(ipAddr) {
        if (/^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/.test(ipAddr)) {
            return (true)
        }
        return (false)
    }

    function sleep(ms) {
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > ms) {
                break;
            }
        }
    }

</script>
</body>
</html>


